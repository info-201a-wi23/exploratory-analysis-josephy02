<<<<<<< HEAD
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
View(states)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
debugSource("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
debugSource("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
View(national)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>% mutate(diff = cases - county_total_cases) %>% filter(diff != 0)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- total_cases_counties %>% left_join(national, total_cases_counties, by = c( 'date' = 'date'))
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% group_by(date) %>% summarise(county_total_cases = sum(cases))
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- total_cases_counties %>% left_join(national, total_cases_counties, by = c( 'date' = 'date'))
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>% mutate(diff = cases - county_total_cases) %>% filter(diff != 0)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
my_answer <- states %>% group_by(state) %>% summarise(sum(cases))
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% group_by(state) %>% summarise(sum(cases))
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% group_by(state) %>% summarise(sum(cases)) %>% filter(`sum(cases)` == median(`sum(cases)`))
View(my_answer)
lowest_deaths_in_each_state <- lowest_deaths_in_each_state %>% group_by(state) %>% filter(`sum(deaths)` == min(`sum(deaths)`, na.rm = T))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% summarise(sum(cases))
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% group_by(state) %>% summarise(sum(cases)) %>% filter(`sum(cases)` == median(`sum(cases)`))
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% group_by(state) %>% summarise(sum(cases))
View(my_answer)
View(states)
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% group_by(state) %>% summarise(sum(cases)) %>% filter(state == "Washington")
View(my_answer)
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% filter(state == "Washington")
View(my_answer)
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most new cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0))
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most new cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases))
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most new cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
most_cases_wa_date <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(date)
num_most_cases_wa <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(new_cases)
source("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
=======
View(all_averages)
source("D:/Dropbox/School/Winter 2022-23/a2-covid-1lewis7/analysis.R", echo=TRUE)
avg_cases_national <- national %>%
group_by(date) %>%
summarise(avg_national_cases = mean(cases, na.rm = TRUE))
avg_cases_state <- state %>%
group_by(date) %>%
summarise(avg_state_cases = mean(cases, na.rm = TRUE))
avg_cases_state <- state %>%
group_by(date) %>%
summarise(avg_state_cases = mean(cases, na.rm = TRUE))
avg_cases_state <- states %>%
group_by(date) %>%
summarise(avg_state_cases = mean(cases, na.rm = TRUE))
avg_cases_county <- counties %>%
group_by(date) %>%
summarise(avg_county_cases = mean(cases, na.rm = TRUE))
all_averages <- avg_cases_state %>%
left_join(avg_cases_county, by = "date") %>%
left_join(avg_cases_national, by = "date")
# Test for differences
num_diff <- all_averages %>%
filter(avg_national_cases != avg_county_cases)
national_county_avg_diff <- all_averages %>%
filter(avg_national_cases != avg_county_cases)
num_national_county_diff <- nrow(national_county_avg_diff)
num_national_state_diff <- nrow(national_state_avg_diff)
avg_cases_national <- national %>%
group_by(date) %>%
summarise(avg_national_cases = mean(cases, na.rm = TRUE))
avg_cases_state <- states %>%
group_by(date) %>%
summarise(avg_state_cases = mean(cases, na.rm = TRUE))
avg_cases_county <- counties %>%
group_by(date) %>%
summarise(avg_county_cases = mean(cases, na.rm = TRUE))
all_averages <- avg_cases_state %>%
left_join(avg_cases_county, by = "date") %>%
left_join(avg_cases_national, by = "date")
# Test for differences
national_county_avg_diff <- all_averages %>%
filter(avg_national_cases != avg_county_cases)
national_state_avg_diff <- all_averages %>%
filter(avg_national_cases != avg_state_cases)
# 0 differences
num_national_county_diff <- nrow(national_county_avg_diff)
num_national_state_diff <- nrow(national_state_avg_diff)
source("D:/Dropbox/School/Winter 2022-23/a2-covid-1lewis7/analysis.R", echo=TRUE)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
avg_cases_national <- national %>%
group_by(date) %>%
summarise(avg_national_cases = mean(cases, na.rm = TRUE))
avg_cases_national <- national %>% group_by(date) %>%
summarise(avg_national_cases = mean(cases, na.rm = TRUE))
source("D:/Dropbox/School/Winter 2022-23/a2-covid-1lewis7/analysis.R", echo=TRUE)
# 1 Loading data ------------------------------------------------------
# The NYT COVID data at the national, state, and county level originally comes from the New York Times GitHub page: https://github.com/nytimes/covid-19-data/:
# For this assignment, you should use functions from the DPLYR package and pipe operator (%>%) syntax to explore the datasets.
# You should save your answers in variable names listed in backtics, like so `national`
# NOTE: You will often be asked to pull() specific values from your analysis.
>>>>>>> d115e170658499d7a78c61b5ea4960f139978055
# 1.a Load the tidyverse package and the dplyr package
library(tidyverse)
library(dplyr)
# 1.b Load the *national level* data from the following URL into a variable called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
<<<<<<< HEAD
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
source("~/INFO201/a2-covid-kylegrubb/analysis.R")
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases<- states %>% group_by(state) %>% summarise(sum(cases), sum(deaths)) %>% filter (`sum(cases)` == max(`sum(cases)`)) %>% pull(`state`)
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%  summarize(sum(deaths)) %>% pull()
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%  summarize(sum(deaths))
View(total_us_deaths)
View(national)
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% summarise(cases == max(cases))
View(total_us_cases)
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% filter(cases == max(cases))
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% filter(cases == max(cases)) %>% pull(cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%  filter(deaths == max(deaths))
View(total_us_deaths)
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%  filter(deaths == max(deaths)) %>% pull(deaths)
View(counties)
source("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
highest_cases_in_each_state <- highest_cases_in_each_state %>% group_by(state)
View(highest_cases_in_each_state)
View(highest_cases_in_each_state)
highest_cases_in_each_state <- highest_cases_in_each_state %>% group_by(state) %>% filter(`sum(cases)` == max(`sum(cases)`))
View(highest_cases_in_each_state)
View(states)
View(counties)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% group_by(county) %>% summarise(sum(cases)) %>% filter(`sum(cases)` == max(`sum(cases)`)) %>% pull(`sum(cases)`)
print(num_highest_cases_county)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% group_by(county) %>% summarise(sum(cases))
View(num_highest_cases_county)
View(counties)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter(cases == max(cases))
View(num_highest_cases_county)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter(cases == max(cases)) %>% pull(cases)
# 2.g Which county has had the highest number of cases? Make sure to pull() this number `county_highest_cases`
county_highest_cases <- counties %>% filter(cases == max(cases)) %>% pull(county)
# 2.i Because there are multiple counties with the same name across states, it will be helpful to have a column that stores the county and state together, in this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location` that stores the county and state (separated by a comma and space).
counties <- counties %>% mutate("COUNTY, STATE" = paste0(county,", ", state))
View(counties)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases<- states %>% filter(cases = max(cases)) %>% pull(state)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases<- states %>% filter(cases = max(cases)) %>% pull(state)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases<- states %>% filter(cases == max(cases)) %>% pull(state)
# 2.d What is the highest number of cases in a state? Make sure to pull() this number `num_highest_state`
num_highest_state <- states %>% filter(cases == max(cases)) %>% pull(cases)
# 2.d What is the highest number of cases in a state? Make sure to pull() this number `num_highest_state`
num_highest_state <- states %>% filter(cases == max(cases)) %>% pull(cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% mutate(ratio = deaths / cases)
View(state_highest_ratio)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31")
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31") %>% mutate(ratio = deaths/cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31") %>% mutate(ratio = deaths/cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31") %>% mutate(ratio = deaths/cases) %>% filter(ratio = max(ratio))
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31") %>% mutate(ratio = deaths/cases) %>% filter(ratio == max(ratio))
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31") %>% mutate(ratio = deaths/cases) %>% filter(ratio == max(ratio)) %>% pull(state)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter(date == "2023-01-31") %>% filter(cases == min(cases))
View(state_lowest_cases)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter(date == "2023-01-31") %>% filter(cases == min(cases)) %>% pull(state)
# 2.g Which county has had the highest number of cases? Make sure to pull() this number `county_highest_cases`
county_highest_cases <- counties %>% filter(cases == max(cases)) %>% pull(county)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter(cases == max(cases)) %>% pull(cases)
# 2.i Because there are multiple counties with the same name across states, it will be helpful to have a column that stores the county and state together, in this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location` that stores the county and state (separated by a comma and space).
counties <- counties %>% mutate("COUNTY, STATE" = paste0(county,", ", state))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% summarise(sum(deaths))
View(location_most_deaths)
View(counties)
location_most_deaths <- location_most_deaths %>% filter(`sum(deaths)` == max(location_most_deaths$`sum(deaths)`, na.rm = T)) %>% pull(`COUNTY, STATE`)
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(cases == max(cases))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% pull(`COUNTY, STATE`)
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties  %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties  %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% filter(deaths == max(deaths))
location_most_deaths <- location_most_deaths %>%  filter(deaths == max(deaths))
location_most_deaths <- location_most_deaths %>%  filter(deaths == max(deaths))
location_most_deaths <- location_most_deaths %>%  filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% arrange(deaths)
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% arrange(desc(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% arrange(desc(deaths)) %>% pull(`COUNTY, STATE`[1])
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% arrange(desc(deaths)) %>% pull(`COUNTY, STATE`)
location_most_deaths <- location_most_deaths[1]
# 2.k Add a new column to your `national` data frame called `new_cases` — that is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_cases = cases - lag(cases, default = 0))
View(national)
# 2.l Similarly, the `deaths` columns is *not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths` that has the number of *new* deaths each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_deaths = deaths - lag(deaths,default = 0))
View(national)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(new_cases == max(new_cases)) %>% pull(date)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_xdeaths <- national %>% filter(new_deaths == max(new_deaths)) %>% pull(date)
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
most_deaths <- national %>% filter(new_deaths == max(new_deaths)) %>% pull(new_deaths)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state,county) %>% summarise(sum(deaths))
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state,county) %>% summarise(cases = max(deaths))
View(counties)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state,county) %>% summarise(cases = min(deaths))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% summarise(cases = max(cases))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases = max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases == max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% summarise(cases == max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases == max(cases))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases == max(cases))
View(counties)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases == max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases))
View(highest_cases_in_each_state)
View(lowest_deaths_in_each_state)
View(counties)
View(counties)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state,county) %>% summarise(cases = min(deaths))
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state,county) %>% summarise(deaths = min(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state) %>% filter(deaths = min(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(counties) %>% filter(deaths = max(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(counties) %>% filter(deaths = max(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths = max(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise(unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise(unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>%
# Reflection 4 (answer in README.md file)
# Why are there so many counties in `lowest_deaths_in_each_state`? That is, wouldn't you expect the number to be around 50? Why is the number greater than 50?
=======
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv", stringsAsFactors = FALSE)
# 1.c Load the *state level* data from the following URL into a variable called `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = FALSE)
# 1.d Load the *county level* data from the following URL into a variable called `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv", stringsAsFactors = FALSE)
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_states <- nrow(states)
obs_counties <- nrow(counties)
# 1.f How many features (columns) are there in each dataset?
# Create `num_features_national`, `num_features_states`, `num_features_counties`
num_features_national <- ncol(national)
num_features_states <- ncol(states)
num_features_counties <- ncol(counties)
# 2 Exploratory Analysis ----------------------------------------------------
# Reflection 1 (answer in the README.md file)
# Before actually calculating the total number of COVID cases and deaths, record your guesses for the following questions. (1 point)
# Guess: How many total COVID cases do you think there have been in the U.S.?
## My guess is 40 million total covid cases in the US.
# Guess: How many total COVID-related deaths do you think there have been in the U.S.?
## My guess is 1 million total covid deaths in the US.
# Guess: Which state do you think has the highest number of COVID cases, and which state do you think has the lowest?
## My guess is that either California or New York has the highest number of covid cases and Maine has the lowest number of covid cases.
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(deaths)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(state)
# 2.d What is the highest number of cases in a state? Make sure to pull() this number `num_highest_state`
num_highest_state <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>%
filter(date == max(date, na.rm = TRUE)) %>%
mutate(ratio = deaths/cases) %>%
filter(ratio == max(ratio, na.rm = TRUE)) %>%
pull(state)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>%
filter(date == max(date, na.rm = TRUE)) %>%
filter(cases == min(cases, na.rm = TRUE)) %>%
pull(state)
# Reflection 2 (answer in the README.md file)
# Did the number of COVID cases and deaths surprise you? Why or why not? What about the states with the highest and lowest number of cases? How did your guesses line up with the actual results?
## The total number of cases was much more than I had anticipated. That was very shocking to me because it was so much more than I had imagined.
## My guess for the amount of deaths was still low, but much closer than the case count. I was correct in the fact the California had the highest case count
## but I did not predict that American Samoa would have the lowest case count.
# 2.g Which county has had the highest number of cases? Make sure to pull() this number `county_highest_cases`
county_highest_cases <- counties %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(county)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(cases)
# 2.i Because there are multiple counties with the same name across states, it will be helpful to have a column that stores the county and state together, in this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location` that stores the county and state (separated by a comma and space).
counties <- counties %>%
mutate(location = paste(county, state, sep = ", "))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>%
filter(deaths == max(deaths, na.rm = TRUE)) %>%
pull(location)
# As you have seen, the three datasets are "cumulative sums" — that is, running totals of the number of cases and deaths. On each day, the cases and deaths counts either stay the same or increase. However, it would be helpful to know how much cases or deaths increase each day.
# 2.k Add a new column to your `national` data frame called `new_cases` — that is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>%
mutate(new_cases = cases - lag(cases))
# 2.l Similarly, the `deaths` columns is *not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths` that has the number of *new* deaths each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>%
mutate(new_deaths = deaths - lag(deaths))
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>%
filter(new_cases == max(new_cases, na.rm = TRUE)) %>%
pull(date)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(date)
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
most_deaths <- national %>%
filter(new_deaths == max(new_deaths, na.rm = TRUE)) %>%
pull(deaths)
# You can plot this data with built-in plot functions
plot(national$new_cases)
plot(national$new_deaths)
# 3. Grouped Analysis --------------------------------------------------------
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>%
group_by(state) %>%
filter(cases == max(cases, na.rm = TRUE))
# Reflection 3 (answer in README.md file)
# Inspect the `highest_cases_in_each_state` dataframe
# Which county has the highest number of cases in the state of Washington, and does it surprise you? Why or why not? (You may need to google this county to learn about it)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>%
group_by(state) %>%
filter(deaths == min(deaths, na.rm = TRUE))
# Reflection 4 (answer in README.md file)
# Why are there so many counties in `lowest_deaths_in_each_state`? That is, wouldn't you expect the number to be around 50? Why is the number greater than 50?
# The number of counties in lowest_deaths_in_each_state is so big because there are so many counties that have reported zero-death days in the entirety of the COVID-19 pandemic. R adds each county that has reported a 0-death day to the dataframe because each of those rows fit our criteria.
>>>>>>> d115e170658499d7a78c61b5ea4960f139978055
# 4. Groups & Joins  --------------------------------------------------------
# As described on the New York Times GitHub page, collecting this data has been a massive effort. Accordingly, there might be mistakes in the data — perhaps especially in the counties dataset, where data is being collected for more than 3,000 U.S. counties.
# If all the data is accurate, the total number of COVID cases for each date in the counties data should match the number of cases for each date in the national data.
# To check for consistency across the 2 datasets, we're first going to add up all the COVID cases for each date in the counties dataframe. Then we're going to join this data to the national dataframe and see if all the numbers match.
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
<<<<<<< HEAD
total_cases_counties <- counties %>% group_by(date) %>% summarise(county_total_cases = sum(cases))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise (unique.data.frame(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise (unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% filter(unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% filter(county == unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most new cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
most_cases_wa_date <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(date)
num_most_cases_wa <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(new_cases)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>% mutate(diff = cases - county_total_cases) %>% filter(diff != 0)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% dplyr
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases))
unique.data.frame(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique())
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(county,state))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(county,state, cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(cases), unique(county))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(cases, unique(county))
source("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(cases, unique(county))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(county), cases)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(county), cases, unique(date))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(cases), unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise(unique(cases), unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise(unique(cases), unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise(unique(deaths), unique(county))
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% group_by(date) %>% summarise(county_total_cases = sum(cases))
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most new cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
most_cases_wa_date <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(date)
num_most_cases_wa <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(new_cases)
View(national_county_diff)
View(counties)
source("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000.gz", sep = "\INFO201", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000.gz", sep = "\t", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000", sep = "\t", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000", sep = "\t", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000", sep = "\t", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000.gz", sep = "\t", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000.gz", sep = "\t", stringsAsFactors = FALSE)
setwd("/Users/kyle/INFO201/exploratory-analysis-josephy02")
=======
total_cases_counties <- counties %>%
group_by(date) %>%
summarise(county_total_cases = sum(cases, na.rm = TRUE))
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- national %>%
left_join(total_cases_counties, by = "date")
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>%
filter(county_total_cases != cases)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# Reflection 5 (answer in README.md file)
# What do you think about the number and scale of the inconsistencies in the data? Does the fact that there are inconsistencies mean that people should not use this data? Why or why not?
# 27 rows were returned as inconsistent. Since the dataset we are working with is 2m+ rows, I don't think that the number of inconsistencies is jarring. While it does make me slightly question the data, I think that it might be find to find a 100% consistent dataset, especially when working with big data .csv files. I think that people should take note of the inconsistencies and consider them in their analysis, but I don't think that the inconsistencies are bad enough to discard this dataset entirely.
# 5. You Turn!
-------------------------------------------------
# 5.a Now it's your turn to ask your own question! Come up with a new question about this COVID data, and then write code to answer it (at least 2-3 lines)
# QUESTION:  Write your question in English language words here
#
#
#  Write code (at least 2-3 lines) that will answer your question
avg_cases_national <- national %>% group_by(date) %>%
summarise(avg_national_cases = mean(cases, na.rm = TRUE))
# 1 Loading data ------------------------------------------------------
# The NYT COVID data at the national, state, and county level originally comes from the New York Times GitHub page: https://github.com/nytimes/covid-19-data/:
# For this assignment, you should use functions from the DPLYR package and pipe operator (%>%) syntax to explore the datasets.
# You should save your answers in variable names listed in backtics, like so `national`
# NOTE: You will often be asked to pull() specific values from your analysis.
# 1.a Load the tidyverse package and the dplyr package
library(tidyverse)
library(dplyr)
# 1.b Load the *national level* data from the following URL into a variable called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv", stringsAsFactors = FALSE)
# 1.c Load the *state level* data from the following URL into a variable called `states`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv
states <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-states-covid-2023.csv", stringsAsFactors = FALSE)
# 1.d Load the *county level* data from the following URL into a variable called `counties`
# NOTE: This is a large dataset. It may take 30-60 seconds to load.
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv
counties <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-counties-covid-2023.csv", stringsAsFactors = FALSE)
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
obs_states <- nrow(states)
obs_counties <- nrow(counties)
# 1.f How many features (columns) are there in each dataset?
# Create `num_features_national`, `num_features_states`, `num_features_counties`
num_features_national <- ncol(national)
num_features_states <- ncol(states)
num_features_counties <- ncol(counties)
# 2 Exploratory Analysis ----------------------------------------------------
# Reflection 1 (answer in the README.md file)
# Before actually calculating the total number of COVID cases and deaths, record your guesses for the following questions. (1 point)
# Guess: How many total COVID cases do you think there have been in the U.S.?
## My guess is 40 million total covid cases in the US.
# Guess: How many total COVID-related deaths do you think there have been in the U.S.?
## My guess is 1 million total covid deaths in the US.
# Guess: Which state do you think has the highest number of COVID cases, and which state do you think has the lowest?
## My guess is that either California or New York has the highest number of covid cases and Maine has the lowest number of covid cases.
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%
filter(date == max(date, na.rm = TRUE)) %>%
pull(deaths)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(state)
# 2.d What is the highest number of cases in a state? Make sure to pull() this number `num_highest_state`
num_highest_state <- states %>%
filter(cases == max(cases, na.rm = TRUE)) %>%
pull(cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>%
filter(date == max(date, na.rm = TRUE)) %>%
mutate(ratio = deaths/cases) %>%
filter(ratio == max(ratio, na.rm = TRUE)) %>%
pull(state)
# Install maps package
install.packages("maps")
# Load libraries
library("ggplot2")
library("plotly")
library("dplyr")
# Load data
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Add full (lowercased) state name to np_data, matching on state abbreviation
np_data <- np_data %>%
mutate(state_fullname =
tolower(state.name[match(State, state.abb)]))
# Make a new dataframe of the total recreation visits for each state (by full name)
np_state_data <- np_data  %>%
group_by(state_fullname) %>%
summarize(state_total = sum(RecreationVisits))
# Join the `state_shape` and `np_state_data` dataframes as
# np_state_shape_data
np_state_shape_data <- left_join(state_shape,
np_state_data,
by = c("region" = "state_fullname"))
# Make a choropleth map of total recreation visits by state
ggplot(np_state_shape_data) +
geom_polygon(mapping = aes(x = long,
y = lat,
group = group,
fill = state_total)) +
coord_map() +
labs(title = 'National Park Visits 2020', fill = 'Visits')
np_data <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Install relevant libraries
install.packages("scales")
install.packages("scales")
install.packages("scales")
install.packages("scales")
# Install relevant libraries
install.packages("scales")
# Load relevant libraries
library("scales")
install.packages("scales")
np_data <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
# Install relevant libraries
install.packages("scales")
# Load relevant libraries
library("scales")
library("dplyr")
library("ggplot2")
# Exercise 1: You're going to compare the recreation visits over time for at least 2 National Parks
# Explore np_data and pick at least 2 NPs that would be interesting to compare
# Filter the data for those 2 or more NPs
my_parks <- np_data %>%
filter(ParkName %in% c("Arches NP", "Badlands NP"))
# Exercise 2: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# See what the plot looks like before you turn off scientific notation, and then turn off scientific notation by uncommenting and running the line below
options(scipen = 999)
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName))
# Exercise 3: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# Additionally, choose a new color palette
# Possible color palettes: https://r-graph-gallery.com/38-rcolorbrewers-palettes.html
# Also, add a significant, attention-grabbing title and legible x, y axes labels
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName)) +
scale_color_brewer(palette = "Set2") +
labs(title = "Arches Overtakes the Badlands in the 21st Century", x = "Year", y = "Number of Visits")
# Exercise 4: Make a line plot of your 2 or more NPs, and color the lines by the names of the park
# Additionally, choose a new color palette
# Also, add a significant, attention-grabbing title and legible x, y axes labels
# Finally, format the x tick labels so that they appear every 5 years, and change the y axis to abbreviated thousands (k) and millions (m)
ggplot(my_parks) +
geom_line(aes(x = Year, y = RecreationVisits, color = ParkName)) +
scale_color_brewer(palette = "Set2") +
labs(title = "Arches Overtakes the Badlands in the 21st Century", x = "Year", y = "Number of Visits") +
scale_x_continuous(breaks = seq(1980, 2020, 5)) +
scale_y_continuous(labels = label_number_si())
# Install maps package
install.packages("maps")
# Load libraries
library("ggplot2")
library("plotly")
library("dplyr")
# Load National Park location data
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv
park_locations <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/National-Park-Locations.csv", stringsAsFactors = FALSE)
# Load state shapefile
state_shape <- map_data("state")
# Create a base map
ggplot(data = state_shape) +
geom_polygon(aes(x = long,
y = lat,
group = group)) +
coord_map()
t
t
# Load libraries
library("dplyr")
library("stringr")
library("ggplot2")
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("data/2020-10-01-2020-10-31.csv", stringsAsFactors() = FALSE)
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("data/2020-10-01-2020-10-31.csv", stringsAsFactors() = FALSE)
# Exercise 2: We want to create a new date column ("date") with the month AND year and a default first day of the month
# Make a new column with checkout month, checkout year, and a default day value ("01") *pasted* together like so: 2020-10-01
# Then convert that column to a date value
spl_df <- spl_df %>%
mutate(date = as.Date(paste0(checkoutyear, "-", checkoutmonth, "-01")))
# Load libraries
library("dplyr")
library("stringr")
library("ggplot2")
# Exercise 1: Load the data
# Download and unzip one or more of the SPL datasets and load here from a file path
spl_df <- read.csv("data/2020-10-01-2020-10-31.csv", stringsAsFactors() = FALSE)
# Exercise 2: We want to create a new date column ("date") with the month AND year and a default first day of the month
# Make a new column with checkout month, checkout year, and a default day value ("01") *pasted* together like so: 2020-10-01
# Then convert that column to a date value
spl_df <- spl_df %>%
mutate(date = as.Date(paste0(checkoutyear, "-", checkoutmonth, "-01")))
S
# Exercise 3: Filter using string detect for one of the following authors, or an author of your choice:
author_df <- spl_df %>%
checkouts_per_month <- author_df %>%
group_by(date) %>%
summarise(checkouts = sum(checkouts))
ggplot(checkouts_per_month, aes(x = date, y = checkouts)) +
geom_line() +
labs(title = "J.R.R. Tolkien Checkouts by Month", x = "Month", y = "Checkouts") +
theme_minimal()
library(kableExtra)
kyle_summary <- read.csv("kyle_summary_df.csv", stringsAsFactors = FALSE)
state_averages <- read.csv("state_averages.csv", stringsAsFactors = FALSE)
joseph_summary <- read.csv("joseph_summary.csv", stringsAsFactors = FALSE)
head(kyle_summary[c("region","days", "year")])%>%
kable() %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "lightgrey")
#-------------------------
head(state_averages[c("state", "median_ppsf_avg","median_list_ppsf_avg","median_list_ppsf_avg", "avg_diff_ratio","avg_homes_sold")])%>%
kable() %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "lightgrey")
#-------------------------------
head(joseph_summary[c(,"DATE","RRVRUSQ156N")])%>%
kable() %>%
kable_styling(position = "left", full_width = FALSE) %>%
column_spec(1, bold = TRUE, border_right = TRUE, color = "black", background = "lightgrey")
library(formattable)
install.packages("formattable")
library(formattable)
kyle_summary <- read.csv("kyle_summary_df.csv", stringsAsFactors = FALSE)
setwd("C:/Users/where/Documents/GitHub/exploratory-analysis-josephy02")
library(formattable)
kyle_summary <- read.csv("kyle_summary_df.csv", stringsAsFactors = FALSE)
state_averages <- read.csv("state_averages.csv", stringsAsFactors = FALSE)
joseph_summary <- read.csv("joseph_summary.csv", stringsAsFactors = FALSE)
kyle_summary <- kyle_summary %>% select(-X)
state_averages <- state_averages %>% select(-X)
joseph_summary <- joseph_summary %>% select(-X)
kyle_summary %>%
arrange(desc(days)) %>%
mutate_each(funs(round(., 2)), -c(region, year))
head(10) %>%
formattable(list(
region = color_bar("deepskyblue")
days = color_bar("yellow"),
kyle_summary %>%
arrange(desc(days)) %>%
mutate_each(funs(round(., 2)), -c(region, year))
library(formattable)
library(tidyverse)
kyle_summary <- read.csv("kyle_summary_df.csv", stringsAsFactors = FALSE)
state_averages <- read.csv("state_averages.csv", stringsAsFactors = FALSE)
joseph_summary <- read.csv("joseph_summary.csv", stringsAsFactors = FALSE)
kyle_summary <- kyle_summary %>% select(-X)
state_averages <- state_averages %>% select(-X)
joseph_summary <- joseph_summary %>% select(-X)
kyle_summary %>%
arrange(desc(days)) %>%
mutate_each(funs(round(., 2)), -c(region, year))
library(tidyverse)
library(formattable)
kyle_summary <- read.csv("kyle_summary_df.csv", stringsAsFactors = FALSE)
state_averages <- read.csv("state_averages.csv", stringsAsFactors = FALSE)
joseph_summary <- read.csv("joseph_summary.csv", stringsAsFactors = FALSE)
kyle_summary <- kyle_summary %>% select(-X)
state_averages <- state_averages %>% select(-X)
joseph_summary <- joseph_summary %>% select(-X)
kyle_summary %>%
arrange(desc(days)) %>%
mutate_each(funs(round(., 2)), -c(region, year)) %>%
head(10) %>%
formattable(list(
region = color_bar("deepskyblue")
days = color_bar("yellow"),
kyle_summary %>%
arrange(desc(days)) %>%
mutate_each(funs(round(., 2)), -c(region, year)) %>%
head(10) %>%
formattable(list(
region = color_bar("deepskyblue"),
days = color_bar("yellow"),
year = color_bar("lightgreen"),
), align = "l")
kyle_summary %>%
arrange(desc(days)) %>%
mutate_each(funs(round(., 2)), -c(region, year)) %>%
head(10) %>%
formattable(list(
region = color_bar("deepskyblue"),
days = color_bar("yellow"),
year = color_bar("lightgreen"),
), align = "l")
kyle_summary %>%
arrange(desc(days)) %>%
head(10) %>%
formattable(list(
region = color_bar("deepskyblue"),
days = color_bar("yellow"),
year = color_bar("lightgreen"),
), align = "l")
kyle_summary %>%
arrange(desc(days)) %>%
head(10) %>%
formattable(list(
region = color_bar("deepskyblue"),
days = color_bar("yellow"),
year = color_bar("lightgreen"),
), align = "l")
>>>>>>> d115e170658499d7a78c61b5ea4960f139978055
