# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
View(states)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
debugSource("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
debugSource("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
View(national)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>% mutate(diff = cases - county_total_cases) %>% filter(diff != 0)
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- total_cases_counties %>% left_join(national, total_cases_counties, by = c( 'date' = 'date'))
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% group_by(date) %>% summarise(county_total_cases = sum(cases))
# 4.b Join `total_cases_counties` with the `national` dataframe.
# Save this dataframe as `all_totals`.
all_totals <- total_cases_counties %>% left_join(national, total_cases_counties, by = c( 'date' = 'date'))
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>% mutate(diff = cases - county_total_cases) %>% filter(diff != 0)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
my_answer <- states %>% group_by(state) %>% summarise(sum(cases))
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% group_by(state) %>% summarise(sum(cases))
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% group_by(state) %>% summarise(sum(cases)) %>% filter(`sum(cases)` == median(`sum(cases)`))
View(my_answer)
lowest_deaths_in_each_state <- lowest_deaths_in_each_state %>% group_by(state) %>% filter(`sum(deaths)` == min(`sum(deaths)`, na.rm = T))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% summarise(sum(cases))
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% group_by(state) %>% summarise(sum(cases)) %>% filter(`sum(cases)` == median(`sum(cases)`))
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% group_by(state) %>% summarise(sum(cases))
View(my_answer)
View(states)
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% group_by(state) %>% summarise(sum(cases)) %>% filter(state == "Washington")
View(my_answer)
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% filter(state == "Washington")
View(my_answer)
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most new cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0))
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most new cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
my_answer <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases))
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most new cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
most_cases_wa_date <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(date)
num_most_cases_wa <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(new_cases)
source("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
# 1.e How many observations (rows) are in each dataset?
# Create `obs_national`, `obs_states`, `obs_counties`
obs_national <- nrow(national)
# 1.a Load the tidyverse package and the dplyr package
library(tidyverse)
library(dplyr)
# 1.b Load the *national level* data from the following URL into a variable called `national`
# https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv
national <- read.csv("https://github.com/melaniewalsh/Neat-Datasets/raw/main/us-national-covid-2023.csv")
source("~/INFO201/a2-covid-kylegrubb/analysis.R")
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases<- states %>% group_by(state) %>% summarise(sum(cases), sum(deaths)) %>% filter (`sum(cases)` == max(`sum(cases)`)) %>% pull(`state`)
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%  summarize(sum(deaths)) %>% pull()
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%  summarize(sum(deaths))
View(total_us_deaths)
View(national)
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% summarise(cases == max(cases))
View(total_us_cases)
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% filter(cases == max(cases))
# 2.a How many total COVID cases have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_cases`
total_us_cases <- national %>% filter(cases == max(cases)) %>% pull(cases)
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%  filter(deaths == max(deaths))
View(total_us_deaths)
# 2.b How many total COVID-related deaths have there been in the U.S. by the most recent date in the dataset? Make sure to pull() this number `total_us_deaths`
total_us_deaths <- national %>%  filter(deaths == max(deaths)) %>% pull(deaths)
View(counties)
source("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
highest_cases_in_each_state <- highest_cases_in_each_state %>% group_by(state)
View(highest_cases_in_each_state)
View(highest_cases_in_each_state)
highest_cases_in_each_state <- highest_cases_in_each_state %>% group_by(state) %>% filter(`sum(cases)` == max(`sum(cases)`))
View(highest_cases_in_each_state)
View(states)
View(counties)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% group_by(county) %>% summarise(sum(cases)) %>% filter(`sum(cases)` == max(`sum(cases)`)) %>% pull(`sum(cases)`)
print(num_highest_cases_county)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% group_by(county) %>% summarise(sum(cases))
View(num_highest_cases_county)
View(counties)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter(cases == max(cases))
View(num_highest_cases_county)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter(cases == max(cases)) %>% pull(cases)
# 2.g Which county has had the highest number of cases? Make sure to pull() this number `county_highest_cases`
county_highest_cases <- counties %>% filter(cases == max(cases)) %>% pull(county)
# 2.i Because there are multiple counties with the same name across states, it will be helpful to have a column that stores the county and state together, in this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location` that stores the county and state (separated by a comma and space).
counties <- counties %>% mutate("COUNTY, STATE" = paste0(county,", ", state))
View(counties)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases<- states %>% filter(cases = max(cases)) %>% pull(state)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases<- states %>% filter(cases = max(cases)) %>% pull(state)
# 2.c Which state has had the highest number of COVID cases? Make sure to pull() this value `state_highest_cases`
state_highest_cases<- states %>% filter(cases == max(cases)) %>% pull(state)
# 2.d What is the highest number of cases in a state? Make sure to pull() this number `num_highest_state`
num_highest_state <- states %>% filter(cases == max(cases)) %>% pull(cases)
# 2.d What is the highest number of cases in a state? Make sure to pull() this number `num_highest_state`
num_highest_state <- states %>% filter(cases == max(cases)) %>% pull(cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% mutate(ratio = deaths / cases)
View(state_highest_ratio)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31")
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31") %>% mutate(ratio = deaths/cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31") %>% mutate(ratio = deaths/cases)
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31") %>% mutate(ratio = deaths/cases) %>% filter(ratio = max(ratio))
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31") %>% mutate(ratio = deaths/cases) %>% filter(ratio == max(ratio))
# 2.e Which state has the highest ratio of deaths to cases (deaths/cases), as of the most recent date? Make sure to pull() this value
# HINT: You may need to create a new column in order to do this. `state_highest_ratio`
state_highest_ratio <- states %>% filter(date == "2023-01-31") %>% mutate(ratio = deaths/cases) %>% filter(ratio == max(ratio)) %>% pull(state)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter(date == "2023-01-31") %>% filter(cases == min(cases))
View(state_lowest_cases)
# 2.f Which state has had the fewest number of cases as of the most
# recent date? Make sure to pull() this value `state_lowest_cases`
state_lowest_cases <- states %>% filter(date == "2023-01-31") %>% filter(cases == min(cases)) %>% pull(state)
# 2.g Which county has had the highest number of cases? Make sure to pull() this number `county_highest_cases`
county_highest_cases <- counties %>% filter(cases == max(cases)) %>% pull(county)
# 2.h What is the highest number of cases that have happened in a single county? Make sure to pull() this number `num_highest_cases_county`
num_highest_cases_county <- counties %>% filter(cases == max(cases)) %>% pull(cases)
# 2.i Because there are multiple counties with the same name across states, it will be helpful to have a column that stores the county and state together, in this form: "COUNTY, STATE".
# Therefore, add a new column to your `counties` data frame called `location` that stores the county and state (separated by a comma and space).
counties <- counties %>% mutate("COUNTY, STATE" = paste0(county,", ", state))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% summarise(sum(deaths))
View(location_most_deaths)
View(counties)
location_most_deaths <- location_most_deaths %>% filter(`sum(deaths)` == max(location_most_deaths$`sum(deaths)`, na.rm = T)) %>% pull(`COUNTY, STATE`)
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(cases == max(cases))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% pull(`COUNTY, STATE`)
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties  %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties  %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% filter(deaths == max(deaths))
location_most_deaths <- location_most_deaths %>%  filter(deaths == max(deaths))
location_most_deaths <- location_most_deaths %>%  filter(deaths == max(deaths))
location_most_deaths <- location_most_deaths %>%  filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% arrange(deaths)
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% arrange(desc(deaths))
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% arrange(desc(deaths)) %>% pull(`COUNTY, STATE`[1])
# 2.j What is the name of the location (county, state) with the highest number of deaths? Make sure to pull() this value `location_most_deaths`
location_most_deaths <- counties %>% group_by(`COUNTY, STATE`) %>% filter(deaths == max(deaths)) %>% arrange(desc(deaths)) %>% pull(`COUNTY, STATE`)
location_most_deaths <- location_most_deaths[1]
# 2.k Add a new column to your `national` data frame called `new_cases` — that is, the number new cases each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_cases = cases - lag(cases, default = 0))
View(national)
# 2.l Similarly, the `deaths` columns is *not* the number of new deaths per day.
# Add  a new column to the `national` data frame called `new_deaths` that has the number of *new* deaths each day.
# HINT: The dyplr lag() function will be very helpful here.
national <- national %>% mutate(new_deaths = deaths - lag(deaths,default = 0))
View(national)
# 2.m What was the date when the most new cases in the U.S. occurred? Make sure to pull() this value `date_most_cases`
date_most_cases <- national %>% filter(new_cases == max(new_cases)) %>% pull(date)
# 2.n What was the date when the most new deaths in the U.S. occurred? Make sure to pull() this value `date_most_deaths`
date_most_xdeaths <- national %>% filter(new_deaths == max(new_deaths)) %>% pull(date)
# 2.o How many people died on the date when the most deaths occurred? Make sure to pull() this value `most_deaths`
most_deaths <- national %>% filter(new_deaths == max(new_deaths)) %>% pull(new_deaths)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state,county) %>% summarise(sum(deaths))
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state,county) %>% summarise(cases = max(deaths))
View(counties)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state,county) %>% summarise(cases = min(deaths))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% summarise(cases = max(cases))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases = max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases == max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% summarise(cases == max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases == max(cases))
View(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases == max(cases))
View(counties)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state,county) %>% filter(cases == max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases))
View(highest_cases_in_each_state)
View(lowest_deaths_in_each_state)
View(counties)
View(counties)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state,county) %>% summarise(cases = min(deaths))
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state,county) %>% summarise(deaths = min(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(state) %>% filter(deaths = min(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(counties) %>% filter(deaths = max(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(counties) %>% filter(deaths = max(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths = max(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise(unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise(unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>%
# Reflection 4 (answer in README.md file)
# Why are there so many counties in `lowest_deaths_in_each_state`? That is, wouldn't you expect the number to be around 50? Why is the number greater than 50?
# 4. Groups & Joins  --------------------------------------------------------
# As described on the New York Times GitHub page, collecting this data has been a massive effort. Accordingly, there might be mistakes in the data — perhaps especially in the counties dataset, where data is being collected for more than 3,000 U.S. counties.
# If all the data is accurate, the total number of COVID cases for each date in the counties data should match the number of cases for each date in the national data.
# To check for consistency across the 2 datasets, we're first going to add up all the COVID cases for each date in the counties dataframe. Then we're going to join this data to the national dataframe and see if all the numbers match.
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% group_by(date) %>% summarise(county_total_cases = sum(cases))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise (unique.data.frame(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise (unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% filter(unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% filter(county == unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most new cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
most_cases_wa_date <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(date)
num_most_cases_wa <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(new_cases)
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# 4.c Filter the all_totals dataframe to find only the rows where the "county_total_cases" column does not match the "cases" column
# Save as national_county_diff
national_county_diff <- all_totals %>% mutate(diff = cases - county_total_cases) %>% filter(diff != 0)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% dplyr
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases))
unique.data.frame(highest_cases_in_each_state)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique())
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(county,state))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(county,state, cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(cases), unique(county))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(cases, unique(county))
source("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(cases, unique(county))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(county), cases)
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(county), cases, unique(date))
# 3.a For each state, what is the county with the highest number of COVID cases? Make a dataframe that has every state and the county with the highest number of cases and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `highest_cases_in_each_state`
highest_cases_in_each_state <- counties %>% group_by(state) %>% filter(cases == max(cases)) %>% summarise(unique(cases), unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T))
View(lowest_deaths_in_each_state)
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise(unique(cases), unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise(unique(cases), unique(county))
# 3.b For each state, what is the county with the lowest number of COVID-related deaths (not cases this time)?
# Make a dataframe that has every state and the county with lowest number of deaths and corresponding rows (hint: you will need to use a grouping operation and a filter)
# Save as `lowest_deaths_in_each_state`
lowest_deaths_in_each_state <- counties %>% group_by(county) %>% filter(deaths == max(deaths)) %>% group_by(state) %>% filter(deaths == min(deaths, na.rm = T)) %>% summarise(unique(deaths), unique(county))
# 4.a Create a `total_cases_counties` dataframe that adds up all the COIVD cases for all the counties for every date in the counties dataframe.
# You should name the columns `date` and `county_total_cases`.
total_cases_counties <- counties %>% group_by(date) %>% summarise(county_total_cases = sum(cases))
# 4.d Calculate the number of rows in the national_county_diff dataframe
# Save as num_national_county_diff
num_national_county_diff <- nrow(national_county_diff)
# QUESTION:  Write your question in English language words here
#Since we live in washington, what day in Washington had the most new cases?
#And how many cases were there in WA on that day?
#  Write code (at least 2-3 lines) that will answer your question
most_cases_wa_date <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(date)
num_most_cases_wa <- states %>% filter(state == "Washington") %>% mutate(new_cases = cases - lag(cases, default = 0)) %>% filter(new_cases == max(new_cases)) %>% pull(new_cases)
View(national_county_diff)
View(counties)
source("~/INFO201/a2-covid-kylegrubb/analysis.R", echo=TRUE)
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = "blue"))
library(ggplot2)
df <- data.frame(
label = c("A", "B", "C", "D"),
value = 1:4,
stringsAsFactors = F
)
ggplot(df) +
geom_col(mapping = aes(x = label, y = value, fill = blue))
np_data <- read.csv("https://raw.githubusercontent.com/melaniewalsh/Neat-Datasets/main/1979-2020-National-Park-Visits-By-State.csv", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000.gz", sep = "\INFO201", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000.gz", sep = "\t", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000", sep = "\t", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000", sep = "\t", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000", sep = "\t", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000.gz", sep = "\t", stringsAsFactors = FALSE)
housing_df <- read.csv("city_market_tracker.tsv000.gz", sep = "\t", stringsAsFactors = FALSE)
setwd("/Users/kyle/INFO201/exploratory-analysis-josephy02")
setwd("/Users/kyle/INFO201/exploratory-analysis-josephy02")
